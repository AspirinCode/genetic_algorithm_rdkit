import rdkit
from rdkit import DataStructs
from rdkit.Chem.Fingerprints import FingerprintMols
from rdkit import Chem
from rdkit.Chem import AllChem as Chem
from rdkit.Chem.Draw import ShowMol
import statistics
import time
import random
import sys
"""
This GA uses RDKit to make atomic mutations to a starting imidazole.
The starting structure is not random.
Fitness test uses RDKit FingerprintSimilarity.
Number of atoms in parent/children are fixed.
"""
class Benchmark:
    @staticmethod
    def run(function):
        timings = []
        stdout = sys.stdout
        for i in range(5):
            sys.stdout = None
            startTime = time.time()
            function()
            seconds = time.time() - startTime
            sys.stdout = stdout
            timings.append(seconds)
            mean = statistics.mean(timings)
            print("{} {:3.2f} {:3.2f}".format(
                1 + i, mean,
                statistics.stdev(timings, mean) if i > 1 else 0))
class Chromosome(Chem.rdchem.Mol):
    def __init__(self, genes, fitness):
        Chem.rdchem.Mol.__init__(self)
        self.Genes = genes
        self.Fitness = fitness
        self.Mol = Chem.MolFromSmiles(genes)
        self.RWMol = Chem.MolFromSmiles(genes)
        self.RWMol = Chem.RWMol(Chem.MolFromSmiles(genes))

def _generate_parent(length, geneSet, get_fitness):
    genes = "[NH+]1C=CN(C1C)C"
    fitness = get_fitness(genes)
    return Chromosome(genes, fitness)

def _mutate(parent, geneSet, get_fitness):
    childGenes = parent
    mutate_operations = ["add fragment"]#, "replace atom", "add atom", "remove atom"]
    mutation_type = random.sample(mutate_operations, 1)[0]
    if mutation_type == "replace atom":

        while True:
            oldGene, alternate = random.sample(range(0,childGenes.RWMol.GetNumAtoms()), 2)
            if childGenes.RWMol.GetAtomWithIdx(alternate).IsInRing() == False and\
                    childGenes.RWMol.GetAtomWithIdx(oldGene).IsInRing() == False:
                break
        newGene = random.sample(geneSet, 1)[0]
        try:
            childGenes.RWMol.GetAtomWithIdx(alternate).SetAtomicNum(newGene) if\
                  childGenes.RWMol.GetAtomWithIdx(oldGene).GetFormalCharge() != 0 else\
                  childGenes.RWMol.GetAtomWithIdx(oldGene).SetAtomicNum(newGene)
            Chem.SanitizeMol(childGenes.RWMol)
            genes = Chem.MolToSmiles(childGenes.RWMol)
            fitness = get_fitness(genes)
            return Chromosome(genes, fitness)
        except:
            print("sant fail")
            genes = Chem.MolToSmiles(parent.Mol)
            return Chromosome(genes, 0)
            pass    
    elif mutation_type == "remove atom":
        
        while True:
            oldGene = random.sample(range(childGenes.RWMol.GetNumAtoms()), 1)[0]
            if childGenes.RWMol.GetAtomWithIdx(oldGene).GetExplicitValence() == 1:
                break
        try:
            childGenes.RWMol.RemoveAtom(oldGene)
            childGenes.RWMol.UpdatePropertyCache(strict=True)
            Chem.SanitizeMol(childGenes.RWMol)
            genes = Chem.MolToSmiles(childGenes.RWMol)
            fitness = get_fitness(genes)
            return Chromosome(genes, fitness)
        except:
            genes = Chem.MolToSmiles(parent.Mol)
            return Chromosome(genes, 0)
            pass

    elif mutation_type == "add atom":
        oldGene = random.sample(range(childGenes.RWMol.GetNumAtoms()), 1)[0]
        newGeneNumber = childGenes.RWMol.GetNumAtoms()
        
        try:
            childGenes.RWMol.AddAtom(Chem.Atom(newGene))
            childGenes.RWMol.AddBond(newGeneNumber,oldGene,Chem.BondType.SINGLE) 
            childGenes.RWMol.UpdatePropertyCache(strict=True)
            Chem.SanitizeMol(childGenes.RWMol)
            genes = Chem.MolToSmiles(childGenes.RWMol)
            fitness = get_fitness(genes)
            return Chromosome(genes, fitness)
        except:
            genes = Chem.MolToSmiles(parent.Mol)
            return Chromosome(genes, 0)
            pass
        
    elif mutation_type == "add fragment":
        try:
            RDKitOrCustom = random.sample([0,1],1)[0]
            if RDKitOrCustom == 2:
                newGene = Chromosome(Chem.MolToSmiles(fparams.GetFuncGroup(\
                    random.sample(range(fparams.GetNumFuncGroups()), 1)[0])),0)
            else:
                newGene = Chromosome(fcat.GetEntryDescription(\
                    random.sample(range(fcat.GetNumEntries()), 1)[0]),0)
            print("this worked")
            combined = Chem.EditableMol(Chem.CombineMols(newGene.Mol,childGenes.Mol))
            oldGene = random.sample(range(childGenes.RWMol.GetNumAtoms()), 1)[0]\
                + newGene.Mol.GetNumAtoms()
            combined.AddBond(1,oldGene,order=Chem.rdchem.BondType.SINGLE)
            combined.RemoveAtom(0)

            childGenes = combined.GetMol()

            Chem.SanitizeMol(childGenes)
            genes = Chem.MolToSmiles(childGenes)
            fitness = get_fitness(genes)
            
            return Chromosome(genes, fitness)
        except:
            print("haylp")
            genes = Chem.MolToSmiles(parent.Mol)
            return Chromosome(genes, 0)
            pass

def get_best(get_fitness, targetLen, optimalFitness, geneSet, display,\
        show_ion):
    random.seed()
    bestParent = _generate_parent(targetLen, geneSet, get_fitness)
    display(bestParent)
    if bestParent.Fitness >= optimalFitness:
        return bestParent
    while True:
        child = _mutate(bestParent, geneSet, get_fitness)
        if bestParent.Fitness >= child.Fitness:
            continue
        display(child)
        if child.Fitness >= optimalFitness:
            show_ion()
            return child
        bestParent = child
