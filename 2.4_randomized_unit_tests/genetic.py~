import subprocess
import rdkit
from rdkit import RDConfig
from rdkit.Chem import FragmentCatalog
from rdkit import DataStructs
from rdkit.Chem.Fingerprints import FingerprintMols
from rdkit import Chem
from rdkit.Chem import AllChem as Chem
from rdkit.Chem.Draw import ShowMol
import os
import statistics
import time
import random
import sys
from contextlib import contextmanager
"""
This GA uses RDKit to make atomic mutations to a starting imidazole.
The starting structure is not random.
Fitness test uses RDKit FingerprintSimilarity.
Number of atoms in parent/children are fixed.
"""

@contextmanager
def suppress_stdout():
    with open(os.devnull, "w") as devnull:
        old_stdout = sys.stdout
        sys.stdout = devnull
        try:  
            yield
        finally:
            sys.stdout = old_stdout

class Benchmark:
    @staticmethod
    def run(function):
        timings = []
        stdout = sys.stdout
        for i in range(5):
            sys.stdout = None
            startTime = time.time()
            function()
            seconds = time.time() - startTime
            sys.stdout = stdout
            timings.append(seconds)
            mean = statistics.mean(timings)
            print("{} {:3.2f} {:3.2f}".format(
                1 + i, mean,
                statistics.stdev(timings, mean) if i > 1 else 0))

class GeneSet():
    def __init__(self, atoms, rdkitFrags, customFrags):
        self.Atoms = atoms
        self.RdkitFrags = rdkitFrags
        self.CustomFrags = customFrags

class Chromosome(Chem.rdchem.Mol):
    def __init__(self, genes, fitness):
        Chem.rdchem.Mol.__init__(self)
        self.Genes = genes
        self.Fitness = fitness
        self.Mol = Chem.MolFromSmiles(genes)
        self.RWMol = Chem.MolFromSmiles(genes)
        self.RWMol = Chem.RWMol(Chem.MolFromSmiles(genes))

def generate_geneset():
    atoms = [6,7]
    fName = os.path.join(RDConfig.RDDataDir,'FunctionalGroups.txt')
    rdkitFrags = FragmentCatalog.FragCatParams(1,5,fName)
    customFrags = FragmentCatalog.FragCatalog(rdkitFrags)
    fcgen = FragmentCatalog.FragCatGenerator()
    m = Chem.MolFromSmiles('CCCC')
    fcgen.AddFragsFromMol(m,customFrags)
    return GeneSet(atoms, rdkitFrags, customFrags)

def _generate_parent(geneSet, get_fitness):
    genes = "CC1N(C)C=C[NH+]1C"
    fitness = get_fitness(genes)
    print(fitness)
    return Chromosome(genes, fitness)

def _mutate(parent, geneSet, get_fitness, target):
    def replace_atom(childGenes, GeneSet, oldGene):
        geneSet = GeneSet.Atoms
        if childGenes.RWMol.GetAtomWithIdx(oldGene).IsInRing() == True:
            genes = Chem.MolToSmiles(parent.Mol)
            return Chromosome(genes, 0)
        newGene = random.sample(geneSet, 1)[0]
        childGenes.RWMol.GetAtomWithIdx(oldGene).SetAtomicNum(newGene) 
        return childGenes  
    def add_atom(childGenes, GeneSet, oldGene):
        geneSet = GeneSet.Atoms
        newGeneNumber = childGenes.RWMol.GetNumAtoms()  
        newGene = random.sample(geneSet, 1)[0]
        childGenes.RWMol.AddAtom(Chem.Atom(newGene))
        childGenes.RWMol.AddBond(newGeneNumber,oldGene,Chem.BondType.SINGLE) 
        return childGenes
    def remove_atom(childGenes, GeneSet, oldGene):
        if childGenes.RWMol.GetAtomWithIdx(oldGene).GetExplicitValence() != 1:
            genes = Chem.MolToSmiles(parent.Mol)
            return Chromosome(genes, 0)
        childGenes.RWMol.RemoveAtom(oldGene)
        return childGenes
    def add_custom_fragment(childGenes, GeneSet, oldGene):
        geneSet = GeneSet.CustomFrags
        newGene = Chromosome(geneSet.GetEntryDescription(\
            random.sample(range(geneSet.GetNumEntries()), 1)[0]),0)
        oldGene = oldGene + newGene.Mol.GetNumAtoms()
        combined = Chem.EditableMol(Chem.CombineMols(newGene.Mol,childGenes.Mol))
        combined.AddBond(0,oldGene,order=Chem.rdchem.BondType.SINGLE)
        childGenes = combined.GetMol()   
        try:
            childGenes = Chromosome(Chem.MolToSmiles(childGenes),0)  
            return childGenes
        except:
            return 0
    def add_rdkit_fragment(childGenes, GeneSet, oldGene):
        geneSet = GeneSet.RdkitFrags
        try:
            newGene = Chromosome(Chem.MolToSmiles(geneSet.GetFuncGroup(\
                random.sample(range(geneSet.GetNumFuncGroups()), 1)[0])),0)
        except:
            return 0
        oldGene = oldGene + newGene.Mol.GetNumAtoms() 
        combined = Chem.EditableMol(Chem.CombineMols(newGene.Mol,childGenes.Mol))
        combined.AddBond(1,oldGene,order=Chem.rdchem.BondType.SINGLE)
        combined.RemoveAtom(0)
        childGenes = combined.GetMol()   
    def remove_custom_fragment(childGenes, GeneSet, oldGene):
        geneSet = GeneSet.CustomFrags
        newGene = Chromosome(geneSet.GetEntryDescription(\
            random.sample(range(geneSet.GetNumEntries()), 1)[0]),0)
        try:
            truncate = Chem.DeleteSubstructs(childGenes.Mol,newGene.Mol)
            childGenes = truncate
            childGenes = Chromosome(Chem.MolToSmiles(childGenes),0)  
            return childGenes
        except:
            return 0
    def remove_rdkit_fragment(childGenes, GeneSet, oldGene):
        geneSet = GeneSet.RdkitFrags
        try:
            newGene = Chromosome(Chem.MolToSmiles(geneSet.GetFuncGroup(\
                random.sample(range(geneSet.GetNumFuncGroups()), 1)[0])),0)
        except:
            return 0
        try:
            truncate = Chem.DeleteSubstructs(childGenes.Mol,newGene.Mol)
            childGenes = truncate
            childGenes = Chromosome(Chem.MolToSmiles(childGenes),0)  
            return childGenes
        except:
            return 0
    childGenes = Chromosome(parent.Genes,0)
    oldGene = random.sample(range(childGenes.RWMol.GetNumAtoms()), 1)[0]
    mutate_operations = [add_atom, remove_atom, remove_custom_fragment,\
	replace_atom, add_rdkit_fragment, add_custom_fragment, remove_rdkit_fragment]
    i = random.choice(range(len(mutate_operations)))
    childGenes = mutate_operations[i](childGenes, geneSet, oldGene)
    try:
        with suppress_stdout():
            childGenes.RWMol.UpdatePropertyCache(strict=True)
            Chem.SanitizeMol(childGenes.RWMol)
            genes = Chem.MolToSmiles(childGenes.RWMol)
            fitness = get_fitness(genes)
            return Chromosome(genes, fitness)
    except:
        with suppress_stdout():
            return Chromosome(parent.Genes, 0)
        

def get_best(get_fitness, optimalFitness, geneSet, display,\
        show_ion, target):
    random.seed()
    bestParent = _generate_parent(geneSet, get_fitness)
    display(bestParent)
    if bestParent.Fitness >= optimalFitness:
        return bestParent
    while True:
        with suppress_stdout():
            child = _mutate(bestParent, geneSet, get_fitness, target)
        if bestParent.Fitness >= child.Fitness:
            continue
        display(child)
        if child.Fitness >= optimalFitness:
            show_ion()
            return child
        bestParent = child
